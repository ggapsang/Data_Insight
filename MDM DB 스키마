# DB Schema

MDM 시스템의 DB 스키마의 기본적인 컨셉들은 다음과 같이 되어 있다

- 데이터베이스에 업로드되는 설비태그들은 업로드되는 모든 설비 태그들이 공통적으로 갖는 필드들이 존재한다. 이를 ‘공통속성’이라고 부른다
- 공통속성은 하나의 테이블로도 관리 가능한 단순한 구조이다. 물론, 정규화를 통해 여러 개의 테이블로 나누어 질 수 있지만 관계형 데이터베이스의 정적 스키마에 따라 쉽게 구현이 가능하다.
- 공통속성 필드들 중 특정한 필드의 필드값, 예컨대 ‘타입’이라는 필드의 값에 따라 해당 레코드의 다른 필드들의 이름과 개수가 변한다. 이렇게 변하는 필드들을 ‘개별속성’이라고 부른다.
- 개별속성은 정적인 스키마를 사용하는 관계형데이터베이스에서는 흔하지 않으며 더 유연한 스키마 구조가 필요하다. 동적 스키마(Dynamic Schema)가 그것이다.
- 동적 스키마를 구현하는 방법 중 하나는 관계형 데이터베이스가 아닌 NoSQL 형태의 데이터베이스를 사용하는 것이다(문서 지향형 데이터베이스(Document Oriented Database). 그러나 실제 MDM 구축에 있어서 관계형 데이터베이스를 사용한다.
- 관계형데이터베이스에서 이러한 동적 스키마를 구현하려면 원칙적으로는 ‘타입’ 필드의 값 별로 별도의 테이블을 다 하나씩 만들어야 한다.
- 그러나 보통 이러한 타입은 300-500개. 타입별로 만들어진 테이블 안에 동적 필드값은 1-3000개까지 늘어나며 각 테이블 안의 레코드 개수는 10-10,000개 사이로 상대적으로 적다. 이러한 경우 데이터 스키마가 매우 복잡해진다
- 따라서 타입 값에 따른 별도의 테이블들을 일일이 만드는 것이 아니라 EAV 모델과 같은 방법을 사용한다. Entity, Attribute, Value의 세 개의 테이블로 나누어 관리한다.
    - **Entity Table**
        - **Primary Key**: 각 엔티티에 대한 유일한 식별자 (예: **`entity_id`**).
        - **Other Fields**: 엔티티에 대한 추가 정보를 저장할 수 있는 필드 (예: **`entity_name`**, **`entity_type`** 등).
    - **Attribute Table**
        - **Primary Key**: 각 속성에 대한 유일한 식별자 (예: **`attribute_id`**).
        - **Other Fields**: 속성 이름, 데이터 타입, 기타 속성에 관한 메타데이터(예: **`attribute_name`**, **`data_type`**).
    - **Value Table**
        - **Primary Key**: 특별한 경우를 제외하고는 일반적으로 각 값의 유일한 식별자가 될 수 있는 컬럼 (예: **`value_id`**).
        - **Foreign Keys**
            - **`entity_id`**: **`Entity`** 테이블의 **`entity_id`**를 참조. 어떤 엔티티가 이 값을 가지고 있는지를 나타냄.
            - **`attribute_id`**: **`Attribute`** 테이블의 **`attribute_id`**를 참조합. 어떤 속성의 값이 저장되어 있는지를 나타냄
    - 참조 관계
        - **Entity to Value**: **`Entity`** 테이블과 **`Value`** 테이블은 **`entity_id`**를 통해 연결. 각 값은 특정 엔티티에 속하므로, **`Value`** 테이블의 **`entity_id`**는 **`Entity`** 테이블의 **`entity_id`**를 외래 키로 참조.
        - **Attribute to Value**: **`Attribute`** 테이블과 **`Value`** 테이블은 **`attribute_id`**를 통해 연결. 각 값은 특정 속성에 대한 것이므로, **`Value`** 테이블의 **`attribute_id`**는 **`Attribute`** 테이블의 **`attribute_id`**를 외래 키로 참조.
- **그러나 이러한 방식 역시 MDM 시스템에서는 적합할 수 있어도, 수시로 데이터가 수정되고 업로드되는 작업 상황에서는 데이터 무결성을 유지하는 것이 매우 어렵다**(혹은 이를 유지하기 위해서는 작업 속도가 희생되고 진척이 더딤)
- 그래서 하나의 테이블 안에 Entity 필드, Attribute 필드, Value필드를 모두 구현하고(즉 속성 필드들을 모두 피벗팅), 어플리케이션이나 뷰 단에서 사용자가 보기 편한 방식의 로직을 추가하는 방법도 있다(Data Insight - Supoort Process Management가 이러한 방식으로 구현되어 있음)

<aside>
📌 **기술검토사항**
MDM 시스템의 데이터베이스 스키마는 사실 당사에서 결정할 문제는 아니며(DBMS 구현 업무를 맡은 것이 아니라면), 당사에서는 데이터정비 시 MDM 업로드에 앞서 미리 정비된 데이터들을 검수하고, 이를 관리하기 위해 MDM과 유사하면서도 작업에 더 적합한 구조의 데이터 관리 체계가 필요하다(오히려, 정제된 데이터만 등록되는 MDM DB에 비해 프로젝트 작업 시 관리해야 되는 데이터의 양이 더 많기도 함).

**<Pre-MDM DB> 구조를 구현할 수 있는 가장 효율적이고 적합한 데이터베이스 시스템은 무엇인가

1안) NoSQL 데이터베이스 : MongoDB?
2안) EAV 방식
3안) 피벗 테이블-어플리케이션 단계에서의 관리**

검토시 중점사항
- 데이터의 값과 스키마 구조 모두 잦은 수정이 계속되는 상황
- 무결성 조건을 지키기 위해 데이터 정합성(품질)이 향상될 수 있으나, 지나치게 복잡한 조건으로 작업 속도를 늦추지 않아야 함

</aside>
