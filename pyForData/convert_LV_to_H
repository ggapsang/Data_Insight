import os
import pandas as pd
import json
import re

from tqdm import tqdm
from datetime import datetime

tqdm.pandas()

import warnings
import sqlite3
warnings.filterwarnings("ignore")


  class MeltingData() :
    def __init__(self, df, data_path=None, dic_cct=None) :
        self.df = df
        self.data_path = data_path
        self.dict_cct = dic_cct

    def step1(self) :
        """load data : 데이터 불러오기"""
        if self.data_path == None :
            self.df = self.df
            return self
        
        else :
            try :
                self.df = pd.read_csv(self.data_path, encoding='cp949')
            except :
                self.df = pd.read_csv(self.data_path, encoding='utf8')
            return self
    
    def step2(self, filter_col='속성 그룹 코드', filter_val='03_DATA') :
        """filtering data : 데이터 필터링"""
        self.df_filtered = self.df[self.df[filter_col].isin([filter_val])]
        return self
    
    def step3(self, col_list=None, key=None, sr_col='SR No', cct_col='C|C|T', process_col='공정') :
        """extract the common part in dataframe : 데이터프레임의 공통 속성 부분 추출 : 기본값은 'SR No', '공정', 'C|C|T'"""
        if col_list is None :
            self.df_common = self.df_filtered[[sr_col, process_col, cct_col]]
            self.df_common.drop_duplicates(subset=[sr_col], keep='first', inplace=True)
        else :
            self.df_common = self.df_filtered[col_list]
            self.df_common.drop_duplicates(subset=[key], keep='first', inplace=True)
        
        return self
    
    def step4(self, attr_header=None, drop_null=False, filter_col='속성 그룹 코드', filter_val='03_DATA', key_col='SR No', first_attr_nm='개별속성1', cct_col='C|C|T', value_nm='속성값', var_nm='속성순번') :
        """make attribute dataframe data : 속성값 데이터프레임 생성"""
        try :
            self.attr_1_col_no = self.df_filtered.columns.get_loc(first_attr_nm)
        except :
            self.attr_1_col_no = self.df_filtered.columns.get_loc("속성1")

        if attr_header == None :
            attr_header = self.dict_cct

        self.dict_idx = attr_header['index']
        self.header_list = attr_header['header_list']
        self.count_attrs = attr_header['count_attrs']

        dfs = []
        for k in tqdm(self.dict_idx.keys()) :

            df_sub = self.df_filtered[self.df_filtered[cct_col] == k]
            
            if df_sub.empty !=True :
                df_attr = df_sub[df_sub[filter_col].isin([filter_val])]
                df_attr = df_attr[[key_col] + df_attr.columns[self.attr_1_col_no:].to_list()]
                count_attr = int(self.count_attrs[k])
                df_attr = df_attr.iloc[:, :count_attr+1]
                dfs.append(df_attr)
        
        results = []
        for df_attr in tqdm(dfs) :
            df_attr = pd.melt(df_attr, id_vars=[key_col], value_vars=df_attr.iloc[:,1:].columns.to_list(), var_name=var_nm, value_name=value_nm, col_level=None, ignore_index=True)
            if drop_null :
                df_attr = df_attr.dropna()
            results.append(df_attr)

        self.df_attrs = pd.concat(results, ignore_index=True)

    def step5(self, key_col='SR No') :
        """merge common dataframe and attribute dataframe : 공통 데이터프레임과 개별속성 데이터프레임 병합"""
        self.df_indiv = pd.merge(self.df_attrs, self.df_common, on=key_col, how='left')
        return self
    
    def step6(self, attr_header=None, var_nm='속성순번', value_nm='속성명', cct_col='C|C|T') :
        """change_attribute_name : 속성명 변경"""
        def change_attribute_name(dict_idx, value_name, cct, header_list) :
            idx = dict_idx[cct]
            dict_attribute_nm = header_list[idx]
            try :
                new_nm = dict_attribute_nm[value_name]
            except :
                new_nm = "Dumb"
            return new_nm
        
        if attr_header == None :
            attr_header = self.dict_cct

        self.dict_idx = attr_header['index']
        self.header_list = attr_header['header_list']
        self.df_indiv[value_nm] = self.df_indiv.progress_apply(lambda x : change_attribute_name(self.dict_idx, x[var_nm], x[cct_col], self.header_list), axis=1)
        return self
    
    def step7(self, value_nm='속성명') :
        """drop dumb value : Dumb 값 제거"""
        self.df_indiv = self.df_indiv[self.df_indiv[value_nm] != 'Dumb']
        return self
    
    def step8(self, key_col='SR_No_ATTR', cat_col='카테고리', class_col='클래스', type_col='타입', value_col='속성값', cct_col='C|C|T', sr_col='SR No', value_nm='속성명') :
        """key 값 생성 및 기타 칼럼 생성"""
        self.df_result = self.df_indiv
        self.df_result = self.df_result[self.df_result[value_nm] != 'Dumb']
        self.df_result[key_col] = self.df_result[sr_col] + '|' + self.df_result[value_nm]
        # self.df_result[cat_col] = self.df_result[cct_col].apply(lambda x : x.split("|")[0])
        # self.df_result[class_col] = self.df_result[cct_col].apply(lambda x : x.split("|")[1])
        self.df_result[type_col] = self.df_result[cct_col].apply(lambda x : x.split("|")[2])
        self.df_result[value_col] = self.df_result[value_col].apply(lambda x : np.nan if x =='-' else x)

        return self

    def step_add(self, common_list = ['SR No', '파일목록', '공정', '설비번호', '설비카테고리코드', '설비클래스코드', '설비유형코드', 'C|C|T']) :
        """공통 파일 생성"""
        self.df_service = self.df_filtered
        self.df_servie = self.df_service[self.df_service['속성 그룹 코드'].isin(['03_DATA'])]
        self.df_service = self.df_service[common_list]
        self.df_service.drop_duplicates(subset=['SR No'], keep='first', inplace=True)

        return self

    def step9(self, key_col='SR_No_ATTR') :
        """중복 key값이 있는 경우 표시함"""
        self.df_duple_key = self.df_result[self.df_result.duplicated(subset=[key_col])]
        return self

    def std_execute(self, show_duplicate=False) :
        self.step1()
        self.step2()
        self.step3()
        self.step4()
        self.step5()
        self.step6()
        self.step7()
        self.step8()
        self.step_add()
        self.step9()

        if show_duplicate :
            print(self.df_duple_key)

        return self.df_result
    
    def help(self) :
        print('step1() : load data : 데이터 불러오기') 
        print('step2() : filtering data : 데이터 필터링')
        print('step3() : extract the common part in dataframe : 데이터프레임의 공통 속성 부분 추출')
        print('step4() : make attribute dataframe data : 속성값 데이터프레임 생성')
        print('step5() : merge common dataframe and attribute dataframe : 공통 데이터프레임과 개별속성 데이터프레임 병합')
        print('step6() : change_attribute_name : 속성명 변경')
        print('step7() : drop dumb value : Dumb 값 제거')
        print('step8() : key 값 생성 및 기타 칼럼 생성')
        print('step_add() : 공통 파일 생성')
        print('step9() : 중복 key 값이 있는 경우 표시함')
        print('std_execute() : run all steps')

    def show_attributes(self):
        # 인스턴스 속성
        instance_attributes = self.__dict__
        print("Instance attributes:")
        for attr, value in instance_attributes.items():
            print(f"{attr}")


def get_cct_dictionary(df, df_cct_attrs_count, attr_nm='개별속성1', save_json=True, save_f_nm="", save_path=os.getcwd()) :
    """속성 해더를 가지고 딕셔너리를 만듬"""

    # 속성명이 있는 행만 추출
    try :
        df_headers = df[df['속성 그룹 코드'].isin(['01_속성명'])]
    except :
        df_headers = df[df['속성 그룹 코드'] == '01_속성명']
    try :
        attr1_col_no = df_headers.columns.get_loc(attr_nm)
    except :
        attr1_col_no = df_headers.columns.get_loc("속성1")
    df_headers = df_headers[['C|C|T'] + df_headers.columns[attr1_col_no:].to_list()]
    
    df_cct_attrs_count = df_cct_attrs_count[df_cct_attrs_count['속성 그룹 코드'].isin(['01_속성명'])]

    # 속성명과 순번에 대한 딕셔너리 생성
    header_list = []
    for i in tqdm(range(len(df_headers))):
        df_header = df_headers.iloc[i].dropna()
        header_list.append(df_header.to_dict())

    # 딕셔너리 생성
    idx_list = [i for i in range(len(header_list))]
    cct_list = [header_list[i]['C|C|T'] for i in range(len(header_list))]
    dict_idx = dict(zip(cct_list, idx_list))
    try :
        count_attrs = dict(zip(df_cct_attrs_count['C|C|T'], df_cct_attrs_count['속성 입력 개수']))
    except :
        count_attrs = dict(zip(df_cct_attrs_count['C|C|T'], df_cct_attrs_count['속성 입력 갯수']))

    cct_dict = {'index' : dict_idx, 'header_list' : header_list, 'count_attrs' : count_attrs}
    # json 파일로 저장
    
    if save_json :
        import json            
        today = datetime.today().strftime("%y%m%d")
        with open(os.path.join(save_path, f'attrs_schema_dict_{save_f_nm}_{today}.json'), 'w') as f:
            json.dump(cct_dict, f)

    return cct_dict


    
def get_df_from_db(table_name, con) :
    query_select_table = f"""
        SELECT * FROM "{table_name}";
        """
    df = pd.read_sql(query_select_table, con)
    return df

def query_create_veiw(view_name, process_no) :
    query = f"""
        CREATE VIEW "{view_name}" AS

        SELECT DISTINCT

            V."SR_NO_ATTR",
            V."SRNo",
            V."설비번호",
            V."속성순번",
            V."속성명",
            "00_메타데이터_속성체계"."데이터유형",
            V."속성값",
            V."카테고리",
            V."타입", 
            V."파일목록"
            
        FROM
        (SELECT DISTINCT
            INDIV."SR_NO_ATTR",
            INDIV."SRNo",
            COM."설비번호",
            COM."공정",  
            INDIV."속성순번",
            INDIV."속성명",
            INDIV."속성값",
            COM."카테고리",
            COM."타입",
            COM."파일목록"
            
            FROM "개별속성(엑셀파일)" AS INDIV
            LEFT OUTER JOIN "공통속성(엑셀파일)" AS COM
            ON INDIV."SRNo" = COM."SRNo"
            
            ) AS V
            LEFT OUTER JOIN "00_메타데이터_속성체계"
            ON V."속성명" = "00_메타데이터_속성체계"."설비속성명"
        WHERE V."공정" = "{process_no}";
        """
    return  query

def query_drop_veiw(view_name) :
    query = f"""
    DROP VIEW "{view_name}";
    """
    return query


## step 0 : 경로 설정 / DB 연결
db_dir = "D:\\pseudoDB\\"
today = datetime.today().strftime("%Y%m%d")
db_path = os.path.join(db_dir, "개별속성데이터_정비완료.db")
con = sqlite3.connect(db_path)
cur = con.cursor()

# 테이블 이름 리스트 가져오기
cur.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = cur.fetchall()

# 결과 출력
print(tables)

# 뷰의 이름 리스트 가져오기
cur.execute("SELECT name FROM sqlite_master WHERE type='view';")
tables = cur.fetchall()

# 결과 출력
print(tables)


# 특정 테이블의 칼럼 정보 가져오기
def get_table_scheme(table_name, cur) :
    """테이블의 칼럼 정보 가져오기"""
    try :
        cur.execute(f"PRAGMA table_info('{table_name}');")
        columns = cur.fetchall()
    except :
        cur.execute(f"PRAGMA view_info('{table_name}');")
        columns = cur.fetchall()
    return columns


columns_516 = get_table_scheme("회전(엑셀파일)", cur)
print(columns_516)

df = get_df_from_db('회전(엑셀파일)', con)
df.head()

df_516 = df[df['공정']=="516"]
df_516.head()


def sort_by_num_part(element) :
    """속성 부분에서 숫자만 추출하여 해당 숫자대로 정렬함
        예시 : '속성1', '속성3', '속성11', '속성21', '속성5' 와 같이 되어 있을 경우 이를 문자열 정렬하면 속성1, 속성 11, 속성21, 속성3, 속성 5순으로 정렬되지만
        숫자 부분만을 추출하여 정렬하면 속성1, 속성3, 속성5, 속성11, 속성21과 같이 정렬됨
        re 라이브러리 사용함"""

    match = re.search(r'(\d+)', element)
    if match:
        number = int(match.group(1))
        return number
    return float('inf')

def convert_table(df, join_col_list, index='설비번호', values='속성값', columns='속성순번', asc_col=True) :
    """세로형에서 가로형으로 전환"""

    df_pivot = df.pivot(index=index, values=values, columns=columns)
    if asc_col :
        col_list = df_pivot.columns.to_list()
        col_list_asc = sorted(col_list, key=sort_by_num_part)
        df_pivot = df_pivot[col_list_asc]

    df_join = df[join_col_list]
    df_result = df_join.copy()
    df_result = pd.merge(df_result, df_pivot, how='left', left_on='설비번호', right_on='설비번호')
    return df_result


id = '설비번호'
values = '속성값'
columns = '속성순번'
join_col_list = ['SRNo', '설비번호', '공정', '파일목록', '타입']
df_result = convert_table(df_516, join_col_list, index='설비번호', values='속성값', columns='속성순번', asc_col=True)
df_result
